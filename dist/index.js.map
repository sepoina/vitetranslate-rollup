{"version":3,"file":"index.js","sources":["../src/dev/babel/getChildrenText.js","../src/dev/babel/getVariableProps.js","../../../node_modules/fnv1a/index.js","../src/dev/babel/babelTranslate.js","../src/dev/rollup/rollupTranslate.js"],"sourcesContent":["//\n// restituisce il testo di un children\n// o false se non è un testo recuperabile\n//\nexport default function getChildrenText(p) {\n  // console.log('Carico dai children:', p);\n  if (p?.container?.children?.length === 1) {\n    const child = p.container.children[0];\n    // se è un testo ok\n    if (child.type === \"JSXText\") return child.value;\n    // se è un calcolo ok se calcolabile subito\n    else if (\n      child.type === \"JSXExpressionContainer\" &&\n      child?.expression?.value\n    )\n      return child.expression.value;\n    else return false;\n  }\n  // altrimenti è un errore\n  return false;\n}\n","//\n// prende la variabile 'variableName' se esiste tra i props o torna false\nexport default function getVariableProps(variableName, p) {\n  // console.log('Carico dalle variabili in linea:', p);\n  const node = p.node.attributes.find(\n    node => node?.name?.name === variableName\n  );\n  if (!node) return false;\n  // ok è una stringa\n  if (node?.value?.type === \"StringLiteral\") return node.value.value;\n  // o è calcolabile come stringa\n  if (\n    node?.value?.type === \"JSXExpressionContainer\" &&\n    node?.value?.expression?.type === \"StringLiteral\"\n  )\n    return node.value.expression.value;\n  return false;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * FNV-1a hash generation init value.\n * It's exposed, because this allows user to override it.\n * More info: https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function#FNV_hash_parameters\n *\n * @type {number}\n */\nhash.BASE = 0x811c9dc5;\n/**\n * Generates 32 bit FNV-1a hash from the given string.\n * As explained here: http://isthe.com/chongo/tech/comp/fnv/\n *\n * @param s {string} String to generate hash from.\n * @param [h] {number} FNV-1a hash generation init value.\n * @returns {number} The result integer hash.\n */\nfunction hash(s, h = hash.BASE) {\n    const l = s.length;\n    for (let i = 0; i < l; i++) {\n        h ^= s.charCodeAt(i);\n        h += (h << 1) + (h << 4) + (h << 7) + (h << 8) + (h << 24);\n    }\n    return h >>> 0;\n}\nexports.default = hash;\nmodule.exports = hash;\n","import getChildrenText from \"./getChildrenText\";\nimport getVariableProps from \"./getVariableProps\";\nimport pathCmd from \"path\";\nimport hash from \"fnv1a\";\n\n//\n// se in input trova un _%_testo_%_\n// aggiunge \"testo\" alla tabella di traduzioni\n// e trasforma \"_%_testo_%_\" in \"_<_id_#_testo_>_\"\n//\nfunction ifStaticAddTable(p, state) {\n  if (!p?.node?.value) return; // non trova l'oggetto\n  if (!/_%_(.*?)_%_/.test(p.node.value)) return; // non trova il riconoscitore\n  const strToAdd = /_%_(.*?)_%_/.exec(p.node.value)?.[1];\n  if (!strToAdd) return; // è vuota o nulla\n  //  console.log(\"trovato da rimpiazzare:\", p.node.value);\n  const data_translate = addToTable(strToAdd, state);\n  p.node.value = getReplacedForTranslate(\n    p.node.value,\n    data_translate,\n    strToAdd\n  );\n  if (p.node.extra.rawValue)\n    p.node.extra.rawValue = getReplacedForTranslate(\n      p.node.extra.rawValue,\n      data_translate,\n      strToAdd\n    );\n  if (p.node.extra.raw)\n    p.node.extra.raw = getReplacedForTranslate(\n      p.node.extra.raw,\n      data_translate,\n      strToAdd\n    );\n  // console.log(\"rimpiazzo:\", p.node.value);\n}\n\n// getta il testo da value e trasforma \"_%_testo_%_\" in \"_<_id_/_testo_>_\"\nfunction getReplacedForTranslate(value, data_translate, text) {\n  const newString = `_<_${data_translate}_/_${text}_>_`;\n  return value.replace(/_%_(.*?)_%_/, newString);\n}\n\nfunction addToTable(strToAdd, state) {\n  //\n  //\n  // recupera il nome del file su cui si trova il translate\n  const nameFile = pathCmd.parse(state.filename).name;\n  //\n  //\n  // calcola l'hash\n  const hex = hash(strToAdd).toString(36);\n  //\n  // va iniettato\n  // console.log(path);\n  const data_translate = `${nameFile}_${hex}`;\n  // console.log(`add to table:${data_translate} value:${strToAdd}`);\n  // assegna\n  globalThis[\"TranslateService\"][\"baseLng\"][data_translate] = strToAdd;\n  return data_translate; // id\n}\n\nexport default api => {\n  const { types: t } = api;\n\n  return {\n    visitor: {\n      // Aggiungi il tuo visitor per le stringhe costanti\n      StringLiteral: ifStaticAddTable,\n      JSXText: ifStaticAddTable,\n      TemplateElement: ifStaticAddTable,\n      JSXOpeningElement(path, state) {\n        //\n        // prova ad aprirlo... è translate? se no torna\n        if (path.node.name.name !== \"Translate\") return;\n        //\n        // ha giù la props data-translate? torna\n        const existingProp = path.node.attributes.find(\n          node => node?.name?.name === \"data-translate\"\n        );\n        if (existingProp) return;\n        //\n        // se contiene c come props la traduzione è differita, ritorna\n        //\n        if (path.node.attributes.find(n => n?.name.name === \"c\")) return;\n        //\n        // se ha un props chiamato 't' lo carica altrimenti carica il contenuto\n        // dei children, se nessuno dei due ha un text mostra un errore\n        const textInternal = path.node.attributes.find(\n          node => node?.name?.name === \"t\"\n        );\n        const text = textInternal\n          ? getVariableProps(\"t\", path)\n          : getChildrenText(path);\n        if (text === false)\n          throw \"Errore, Translate deve contenere solo stringhe\";\n        //\n        // aggiunge alla tabella\n        const data_translate = addToTable(text, state);\n        const newProp = t.jSXAttribute(\n          t.jSXIdentifier(\"data-translate\"),\n          t.stringLiteral(data_translate)\n        );\n        path.node.attributes.push(newProp);\n      },\n    },\n  };\n};\n","import fs from \"fs\";\n\nexport default function rollupTranslate(defs) {\n  return {\n    name: \"onRollupTranslate\",\n    buildStart: {\n      sequential: true,\n      order: \"pre\",\n      handler: () => {\n        //\n        // la public dir è di solito {workspace}/public\n        //\n        globalThis[\"TranslateService\"] = defs;\n        globalThis[\"TranslateService\"].baseLng = {\n          __lngVersion__: CalcolaVersion(),\n        }; // spazio vuoto per gli elementi\n        console.log(\"Preparo il servizio traduzioni.\");\n      },\n    },\n    buildEnd: {\n      sequential: true,\n      order: \"post\",\n      handler: () => {\n        updateFileLanguage();\n      },\n    },\n  };\n}\n\n/**\n * Aggiorna un file di lingua JSON con dati di traduzione. Se il file non esiste, crea un nuovo file\n * utilizzando i dati di traduzione di base forniti. La funzione confronta e aggiorna i dati presenti\n * nel file con i nuovi dati di traduzione, salvando le modifiche solo se sono state apportate variazioni.\n *\n * @function\n * @returns {void}\n *\n * @description\n * Questa funzione legge il contenuto di un file JSON di lingua e lo confronta con i dati di traduzione\n * di base forniti. Se il file non esiste, viene creato utilizzando i dati di traduzione di base. Se ci\n * sono variazioni nei dati di traduzione, le modifiche vengono salvate nel file. La funzione fornisce\n * messaggi di log dettagliati durante il processo.\n *\n */\nfunction updateFileLanguage() {\n  // Specifica il percorso del tuo file JSON\n  const filePath = globalThis[\"TranslateService\"].file;\n  const distPath = globalThis[\"TranslateService\"].dist;\n  console.log(\"TRANSLATE ---------------------------------------------\");\n  console.log(\"Carico traduzione base.\");\n  try {\n    fs.readFile(filePath, \"utf8\", (err, data) => {\n      let state = { newest: true, changed: true },\n        baseData = null;\n      if (err) {\n        console.log(`Non esiste ancora il file ${filePath}, tento di crearlo`);\n        baseData = globalThis[\"TranslateService\"].baseLng; // questi i dati\n      } else {\n        baseData = JSON.parse(data);\n        const newData = globalThis[\"TranslateService\"].baseLng;\n        state = decade(baseData, newData); // se ci sono variazioni\n      }\n      if (state.changed) {\n        // sono avvenute variazioni, salva\n        const stats = state.newest\n          ? \"Nuovo file,\"\n          : `(${state.added} agginte, ${state.deleted} rimosse)`;\n        console.log(`Update avvenuto: ${stats} salvo.`);\n        fs.writeFile(\n          filePath,\n          JSON.stringify(baseData, null, 2),\n          \"utf8\",\n          err => {\n            if (err) {\n              console.error(`Errore durante la scrittura su ${filePath}`, err);\n            } else {\n              console.log(`Dati scritti con successo su ${filePath}`);\n              fs.copyFile(filePath, distPath, err => {\n                if (!err) console.log(`Copiato con successo su ${distPath}`);\n                console.log(\n                  \"END TRANSLATE ---------------------------------------------\"\n                );\n              });\n            }\n          }\n        );\n      } else {\n        console.log(\"Nessun cambiamento.\");\n        console.log(\n          \"END TRANSLATE ---------------------------------------------\"\n        );\n      }\n    });\n  } catch (error) {\n    console.error(`Errore l'elaborazione di ${filePath}, cancellalo`, error);\n    return;\n  }\n}\n\n/**\n * Funzione per confrontare due oggetti e apportare modifiche.\n *\n * @param {Object} a - Primo oggetto da confrontare e modificare.\n * @param {Object} b - Secondo oggetto per il confronto.\n * @returns {boolean} Restituisce true se ci sono state modifiche, altrimenti false.\n *\n * @example\n * const oggettoA = { \"App_f9xds4\": \"rob\", \"App_y3mo81\": \"Santanastaso\" };\n * const oggettoB = { \"App_f9xds4\": \"rob\", \"App_y3mo81\": \"Santanastaso\", \"NuovaChiave\": \"NuovoValore\" };\n * const ciSonoVariazioni = decade(oggettoA, oggettoB);\n * console.log(oggettoA); // { \"App_f9xds4\": \"rob\", \"App_y3mo81\": \"Santanastaso\", \"NuovaChiave\": \"NuovoValore\" }\n * console.log('Ci sono variazioni:', ciSonoVariazioni); // Ci sono variazioni: true\n */\nfunction decade(a, b) {\n  const stats = { changed: false, deleted: 0, added: 0 };\n  // Rimuovi le chiavi da 'a' che non sono presenti in 'b'\n  for (const keyA in a) {\n    if (!(keyA in b)) {\n      delete a[keyA];\n      stats.changed = true;\n      stats.deleted += 1;\n    }\n  }\n  // Aggiungi le chiavi da 'b' che non sono presenti in 'a'\n  for (const keyB in b) {\n    if (!(keyB in a)) {\n      a[keyB] = b[keyB];\n      stats.changed = true;\n      stats.added += 1;\n    }\n  }\n  if (stats.changed) a[\"__lngVersion__\"] = b[\"__lngVersion__\"]; // riporta in a la versione corrente\n  return stats;\n}\n\nfunction CalcolaVersion() {\n  return Date.now();\n}\n"],"names":["getChildrenText","p","_b","_a","child","_c","getVariableProps","variableName","node","_d","exports","hash","s","h","l","i","module","ifStaticAddTable","state","strToAdd","data_translate","addToTable","getReplacedForTranslate","value","text","newString","nameFile","pathCmd","hex","babelTranslate","api","t","path","n","newProp","rollupTranslate","defs","CalcolaVersion","updateFileLanguage","filePath","distPath","fs","err","data","baseData","newData","decade","stats","error","a","b","keyA","keyB"],"mappings":"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","x_google_ignoreList":[2]}